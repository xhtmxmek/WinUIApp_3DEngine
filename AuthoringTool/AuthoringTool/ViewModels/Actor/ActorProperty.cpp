#include "pch.h"
#include "ActorProperty.h"
#include "ActorProperty.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::AuthoringTool::implementation
{
    ActorProperty::ActorProperty(winrt::hstring const& name) : name_{ name }
    {
        //mainWindow에 idl 임포트하고 MainWindow에 변수준다음에 ActorProperty 직접 넣어보기.
        //컨트롤 잘 나오면 성공! 바인딩도 해보기. 바인딩도 잘 되면 성공!
        Microsoft::UI::Xaml::Controls::TextBlock textBlock;
        textBlock.Text(L"Hi");
        mappedControl_ = textBlock;
    }

    hstring ActorProperty::Name()
    {
        return name_;
    }
    winrt::Microsoft::UI::Xaml::UIElement ActorProperty::MappedControl()
    {
        return nullptr;
    }
    void ActorProperty::MappedControl(winrt::Microsoft::UI::Xaml::UIElement const& value)
    {
        mappedControl_ = value;
        propertyChanged_(*this, Microsoft::UI::Xaml::Data::PropertyChangedEventArgs{ L"MappedControl" });
    }
    winrt::event_token ActorProperty::PropertyChanged(winrt::Microsoft::UI::Xaml::Data::PropertyChangedEventHandler const& handler)
    {
        return propertyChanged_.add(handler);
    }
    void ActorProperty::PropertyChanged(winrt::event_token const& token) noexcept
    {
        propertyChanged_.remove(token);
    }
}
